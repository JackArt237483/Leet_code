// 1)Remove Duplicates from Sorted Array-Удалить дубликаты из отсортированного массива

const nums = [1,1,2,3,2,5,2,4,2,2,2,2,2]
// созаем массив для проверки уникалных значений в нем

function  removeDublicate(nums) {
   if(nums.length === 0){
    return 0 
   }

   let uniqueIndex = 0

   for(let i = 1; i< nums.length; i++){
    if (nums[i] !== nums[uniqueIndex]){
      uniqueIndex ++
      nums[uniqueIndex] = nums[i]
    }
   }
   return uniqueIndex + 1
}

const countElement = removeDublicate(nums)
console.log(countElement)
console.log(nums.splice(0, countElement))

//создается функция которая принимает в качестае аргумета массив 
//1)Сначала мы проверяем действительно ли массив nums пустой 
//2)то есть пишем (nums.length === 0) и есть ли там уникальные числа и поэтому возращает 0
//3)создаем переменную которая будеть следить за уникальными значениями в массиве 
//4)дальше ты при помощи for пробегашься по массиву и сравниваем текущий элемент и предыдyщий элемет
//5)Цикл проходит по массиву nums и сравнивает каждый элемент с предыдущим уникальным элементом
//6)nums[i] это теущий элемент массива nums[uniqueIndex] это предыдущий элемент массива
//7)(nums[i] !== nums[uniqueIndex]) вот это условие означает что мы нашли уникальный элемет
//8)то в таком случае мы увеличиваем активный индекс uniqueIndex ++
//9)потом мы замениям nums[uniqueIndex] = nums[i] текущий элемент на новый текущий элемент
//10)После завершения цикла возвращается значение uniqueIndex + 1, 
//которое соответствует количеству уникальных элементов в массиве nums.
// В этом примере nums содержит повторяющиеся элементы. Мы вызываем функцию removeDuplicates(nums),
// которая удаляет дубликаты и возвращает количество уникальных элементов (uniqueCount). 
// Затем мы выводим uniqueCount и первые uniqueCount элементов массива nums с помощью console.log().
// Результатом будет 5 (количество уникальных элементов) и [1, 2, 3, 4, 5] (массив с уникальными 
// элементами).Таким образом, код позволяет удалить дубликаты из массива и вернуть количество
//  уникальных элементов, сохраняя относительный порядок элементов.